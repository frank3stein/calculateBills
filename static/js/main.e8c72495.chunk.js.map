{"version":3,"sources":["count.js","App.js","serviceWorker.js","index.js"],"names":["Count","_this","this","state","props","bill","name","react_default","a","createElement","htmlFor","type","onChange","event","handleAmount","placeholder","amount","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","object","number","parseFloat","target","value","multiplier","setState","defineProperty","objectSpread","calculateTotal","change","fives","tens","twenties","pin","fifties","className","toLocaleString","count","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e8c72495.chunk.js","sourcesContent":["import React from 'react';\n\nclass Count extends React.Component {\n\trender() {\n\t\tconst state = this.props.state;\n\t\tconst bill = this.props.name;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<label htmlFor=\"count\">{state[bill].name}</label>\n\t\t\t\t<input\n\t\t\t\t\tname=\"count\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tonChange={(event) => this.props.handleAmount(event, state, bill)}\n\t\t\t\t\tplaceholder=\"0\"\n\t\t\t\t/>\n\t\t\t\t<label htmlFor=\"count\">{state[bill].amount}</label>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Count;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Count from './count';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpin: {\n\t\t\t\tname: 'PIN',\n\t\t\t\tmultiplier: 1,\n\t\t\t\tamount: 0\n\t\t\t},\n\t\t\tfifties: {\n\t\t\t\tname: \"50's\",\n\t\t\t\tmultiplier: 50,\n\t\t\t\tamount: 0\n\t\t\t},\n\t\t\ttwenties: {\n\t\t\t\tname: \"20's\",\n\t\t\t\tmultiplier: 20,\n\t\t\t\tamount: 0\n\t\t\t},\n\t\t\ttens: {\n\t\t\t\tname: \"10's\",\n\t\t\t\tmultiplier: 10,\n\t\t\t\tamount: 0\n\t\t\t},\n\t\t\tfives: {\n\t\t\t\tname: \"5's\",\n\t\t\t\tmultiplier: 5,\n\t\t\t\tamount: 0\n\t\t\t},\n\t\t\tchange: {\n\t\t\t\tname: 'Change',\n\t\t\t\tmultiplier: 1,\n\t\t\t\tamount: 0\n\t\t\t}\n\t\t};\n\t}\n\n\thandleChange = (event, object, bill) => {\n\t\t// object is the full state, bill is the key value for the bill ex. 'change' or 'tens'\n\t\tconst number = parseFloat(event.target.value) || 0;\n\t\tconst amount = number * parseFloat(object[bill].multiplier);\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\t[bill]: {\n\t\t\t\t\t...object[bill],\n\t\t\t\t\tnumber,\n\t\t\t\t\tamount\n\t\t\t\t}\n\t\t\t},\n\t\t\tthis.calculateTotal\n\t\t);\n\t};\n\n\tcalculateTotal = () => {\n\t\tconst totalAmount =\n\t\t\tparseFloat(this.state.change.amount) +\n\t\t\tparseFloat(this.state.fives.amount) +\n\t\t\tparseFloat(this.state.tens.amount) +\n\t\t\tparseFloat(this.state.twenties.amount) +\n\t\t\tparseFloat(this.state.pin.amount) +\n\t\t\tparseFloat(this.state.fifties.amount);\n\t\treturn totalAmount;\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1> Kassa = {this.calculateTotal().toLocaleString()}</h1>\n\t\t\t\t\t<p>After costs -450 = {(this.calculateTotal() - 450).toLocaleString()}</p>\n\n\t\t\t\t\t<Count name=\"change\" handleAmount={this.handleChange} state={this.state} />\n\t\t\t\t\t<Count name=\"fives\" handleAmount={this.handleChange} state={this.state} />\n\t\t\t\t\t<Count name=\"tens\" handleAmount={this.handleChange} state={this.state} />\n\t\t\t\t\t<Count name=\"twenties\" handleAmount={this.handleChange} state={this.state} />\n\t\t\t\t\t<Count name=\"fifties\" handleAmount={this.handleChange} state={this.state} />\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}